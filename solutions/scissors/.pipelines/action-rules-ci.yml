parameters:
  - name: imageRepository
    type: string
  - name: imageTag
    type: string    
  - name: workingDir
    type: string    
  - name: unittest_reportprefix
    type: string  
  - name: pythonversion
    type: string 
  - name: srcRepoName
    type: string 
  - name: opsRepoName
    type: string   
  - name: keyVaultName
    type: string     
  - name: subscriptionName
    type: string     
  - name: acrServiceConnectionName
    type: string                                   


jobs:
  - job: build_action_rules
    displayName: 'Validate Featurizer'
    pool:
      vmImage: ubuntu-latest

    steps:
      - checkout: self

      - task: AzureKeyVault@2
        inputs:
          azureSubscription: ${{ parameters.subscriptionName }}
          KeyVaultName: ${{ parameters.keyVaultName }}
          SecretsFilter: '*'
          RunAsPreJob: true

      - script: echo "Building App :${{ parameters.imageRepository }}"
        displayName: 'Run CICD'

      - task: UsePythonVersion@0
        inputs:
          versionSpec: '${{parameters.pythonversion}}'
        displayName: 'Use Python ${{parameters.pythonversion}}'

      - script: |
          python -m pip install --upgrade pip
        displayName: 'pip install upgrade'

      - script: |
          pip install pytest pytest-azurepipelines
          pip install pytest-cov
        displayName: 'install pytest'

      - script: |
          pip install -r requirements.txt
        displayName: 'install requirements.txt'
        workingDirectory: ${{ parameters.workingDir }}

    
      - script: |
          python -m pytest \
          --junitxml=$(Common.TestResultsDirectory)/${{ parameters.unittest_reportprefix }}_unittest-results.xml \
          --cov=. \
          --verbose \
          --cov-report=xml:$(Common.TestResultsDirectory)/${{ parameters.unittest_reportprefix }}_coverage.xml .
        displayName: 'Run unit tests'
        workingDirectory: ${{ parameters.workingDir }}

      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        inputs:
          testResultsFiles: '**/*_unittest-results.xml'
          testRunTitle: 'Unit tests'
          failTaskOnFailedTests: true
          searchFolder: $(Common.TestResultsDirectory)

      - task: Docker@2
        displayName: 'Build docker images'
        name: dockerBuild
        inputs:
          containerRegistry: $${{ parameters.acrServiceConnectionName }}
          repository: ${{ parameters.imageRepository }}
          command: 'buildAndPush'
          Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'

      - task: Bash@3
        displayName: 'Display Container name with Tag'
        inputs:
          targetType: 'inline'
          script: |
            echo "Container built: $${{ parameters.acrServiceConnectionName }}/${{ parameters.imageRepository }}:${{ parameters.imageTag }}"

